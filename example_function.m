function [ out ] = example_function(p)
%EXAMPLE_FUNCTION calculates fractals for MATLAB SUBMIT example

%   Fractals are generated by recursively applying a function to complex 
%   numbers and observing where this procedure will tend to infinity.
%   (If you really want to get into this look for example at 
%   https://classes.yale.edu/fractals/MandelSet/welcome.html)
%   Here we will just consider simple polynomes of order 3.  
%
% Copyright (c) 2017, Christian Rohlfing, Julian Becker, Jens Schneider, Patrick Wilken, Tobias Kabzinski
    
    % Create polynomial out of the coefficients. These coefficients have to be passed inside p!
    polynomial = [p.coeff3, p.coeff2, p.coeff1, p.coeff0];  
    
    % Set number of iterations
    number_of_iterations = p.number_of_iterations;
     
    % Define part of the complex plane we want to look at
    z_real = -2:0.005:2; 
    z_imag = -2:0.005:2;
   
    % Combine real and imaginary part to get all the complex numbers z
    [a, b] = meshgrid(z_real, z_imag);
    z = a + 1i*b;
    
    % This will later be our image
    image = zeros(size(z));
    
    % Start iteration
    for n = 1:number_of_iterations
        % Calculate f(z) and store it in z again
        z = polyval(polynomial, z);
        
        % Check which z are still small
        I = abs(z) < 2;
        
        % Add 'something' to the value of the image at these places.
        % This way we can visualize how fast the iteration diverges at each point.   
        image(I) = image(I) + exp(-abs(z(I)));
    end
    
    % Normalize and use logarithm for nicer image
    out.fractal = log(image/number_of_iterations);
end

